/* Generated By:JavaCC: Do not edit this line. InterpretadorTokenManager.java */
package ispd.arquivo.interpretador.internal.simulable;

/** Token Manager. */
public class InterpretadorTokenManager implements InterpretadorConstants
{
        private int contaErrosLex = 0;
        private String erros = new String("");

        public int encontrouErroLex(){
                return contaErrosLex;
        }
        public void addErro(String msg){
                erros = erros+"\u005cn"+msg;
        }
        public String getErros(){
                return erros;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffbeL) != 0L)
         {
            jjmatchedKind = 28;
            return 14;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 27;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7ffffbcL) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
            return 14;
         }
         if ((active0 & 0x2L) != 0L)
            return 14;
         return -1;
      case 2:
         if ((active0 & 0x7ffff80L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
            return 14;
         }
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x3cL) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x3cL) != 0L)
            return 2;
         if ((active0 & 0x5500000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
            return 2;
         }
         if ((active0 & 0x80L) != 0L)
            return 14;
         if ((active0 & 0x2afff00L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0x2affc00L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
            return 14;
         }
         if ((active0 & 0x5500000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
            return 2;
         }
         if ((active0 & 0x300L) != 0L)
            return 14;
         return -1;
      case 5:
         if ((active0 & 0x2afc000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
            return 14;
         }
         if ((active0 & 0x3c00L) != 0L)
            return 14;
         if ((active0 & 0x5500000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x5500000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
            return 2;
         }
         if ((active0 & 0x2ae0000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
            return 14;
         }
         if ((active0 & 0x1c000L) != 0L)
            return 14;
         return -1;
      case 7:
         if ((active0 & 0x7500000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
            return 2;
         }
         if ((active0 & 0xa80000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
            return 14;
         }
         if ((active0 & 0x60000L) != 0L)
            return 14;
         return -1;
      case 8:
         if ((active0 & 0x7500000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 8;
            return 2;
         }
         if ((active0 & 0x80000L) != 0L)
            return 14;
         if ((active0 & 0xa00000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 8;
            return 14;
         }
         return -1;
      case 9:
         if ((active0 & 0x500000L) != 0L)
            return 2;
         if ((active0 & 0x7000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 9;
            return 2;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 9;
            return 14;
         }
         if ((active0 & 0x200000L) != 0L)
            return 14;
         return -1;
      case 10:
         if ((active0 & 0x7000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 10;
            return 2;
         }
         if ((active0 & 0x800000L) != 0L)
            return 14;
         return -1;
      case 11:
         if ((active0 & 0x1000000L) != 0L)
            return 2;
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 11;
            return 2;
         }
         return -1;
      case 12:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 12;
            return 2;
         }
         return -1;
      case 13:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 13;
            return 2;
         }
         return -1;
      case 14:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 14;
            return 2;
         }
         return -1;
      case 15:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 15;
            return 2;
         }
         return -1;
      case 16:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 16;
            return 2;
         }
         return -1;
      case 17:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 17;
            return 2;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000L) != 0L)
            return 2;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 18;
            return 2;
         }
         return -1;
      case 19:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 19;
            return 2;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 20;
            return 2;
         }
         return -1;
      case 21:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 21;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x202003cL);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x808000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x5500200L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x11400L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x802L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x42100L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x12800L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200400L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x5500200L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0xa5000L);
      case 82:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 1, 14);
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x803cL);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x180L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x5500000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020800L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x282000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x3cL);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 2, 2);
         break;
      case 49:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 2);
         break;
      case 50:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 2);
         break;
      case 51:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 2);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x23000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 81:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 14);
         break;
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000400L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x5500000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000L);
      case 69:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 14);
         break;
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x210000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000400L);
      case 83:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x140000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 69:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x4800000L);
      case 77:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 14);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 79:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x3424000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 14);
         break;
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 78:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x5800000L);
      case 79:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x1500000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 83:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 14);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 14);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 88:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 20, 2);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 79:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 2);
         return jjMoveStringLiteralDfa10_0(active0, 0x5000000L);
      case 83:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 76:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 23, 14);
         break;
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 2);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      case 82:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L);
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L);
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L);
      case 82:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(18, 25, 2);
         break;
      case 86:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(22, 26, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd0000484fffff8ffL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(8);
                  }
                  else if ((0x2c00fb7a00000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 35)
                     jjCheckNAddStates(3, 5);
                  break;
               case 14:
               case 2:
                  if ((0x2ffffb7a00000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 35)
                     jjCheckNAddStates(3, 5);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 6:
                  if (curChar == 10 && kind > 35)
                     kind = 35;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0xd0000484fffff8ffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if ((0x78000000f8000001L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x8000000100000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(8);
                  }
                  break;
               case 14:
                  if ((0x7ffffffeffffffffL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(2);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x7ffffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  jjAddStates(3, 5);
                  break;
               case 8:
                  if ((0x8000000100000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 8:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(8);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 4, 5, 7, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\122\122", "\103\123\137\60", "\103\123\137\61", "\103\123\137\62", 
"\103\123\137\63", "\55\55\55", "\114\115\101\121", "\124\122\101\103\105", 
"\106\111\114\101\123", "\115\105\123\124\122\105", "\122\101\116\104\117\115", 
"\115\117\104\105\114\117", "\124\101\122\105\106\101", "\120\117\111\123\123\117\116", 
"\105\123\103\122\101\126\117", "\115\101\121\125\111\116\101", "\103\117\116\105\130\117\105\123", 
"\124\127\117\123\124\101\107\105", "\127\117\122\113\121\125\105\125\105", 
"\106\111\115\137\124\101\122\105\106\101", "\123\105\122\126\111\104\117\122\105\123", 
"\106\111\115\137\115\117\104\105\114\117", "\105\130\120\117\116\105\116\103\111\101\114", 
"\106\111\115\137\103\117\116\105\130\117\105\123", 
"\103\105\116\124\122\117\123\137\104\105\137\123\105\122\126\111\103\117\123", 
"\106\111\115\137\103\105\116\124\122\117\123\137\104\105\137\123\105\122\126\111\103\117\123", null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0x1f80000000L, 
};
static final long[] jjtoSpecial = {
   0x1000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[14];
private final int[] jjstateSet = new int[28];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public InterpretadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public InterpretadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000700L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 36 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                addErro("Erro na linha "+input_stream.getEndLine()+". Caracter "+image+" n\u00c3\u00a3o \u00c3\u00a9 aceito.");
                contaErrosLex++;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
